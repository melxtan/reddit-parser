
[build-system]
requires = ["poetry-core>=1.0.0", "setuptools>=45", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "reddit-analysis"
version = "0.1.0"
description = "A Streamlit app for scraping Reddit posts based on search queries"
authors = ["Melissa Tan <melissaxiaotan@gmail.com>, Cheng Yang <cheng@themoonwatcher.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "reddit_scraper", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
streamlit = "^1.38.0"
pandas = "^2.2.2"
praw = "^7.5.0"
supabase = "^2.7.4"
selenium = "^4.1.0"
beautifulsoup4 = "^4.10.0"
python-dotenv = "^1.0.1"
matplotlib = "^3.9.2"
seaborn = "^0.13.0"
chardet = "^5.2.0"
scikit-learn = "^1.5.2"
boto3 = "^1.35.71"
jinja2 = "^3.1.4"
langfuse = "^2.55.0"
python-docx = "^1.1.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
black = "^24.8.0"
ruff = "^0.6.6"
pre-commit = "^3.8.0"
watchdog = "^6.0.0"

[[tool.poetry.source]]
name = "mirrors"
url = "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/"
priority = "supplemental"

[project]
name = "reddit-scraper"
version = "0.1.0"
description = "A Streamlit app for scraping Reddit posts based on search queries"
readme = "README.md"
authors = [{name = "Your Name", email = "your.email@example.com"}]
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
keywords = ["reddit", "scraper", "streamlit", "selenium"]
requires-python = ">=3.12"

[project.urls]
Homepage = "https://github.com/my-moon-watcher/reddit-scraper"

[tool.setuptools.packages.find]
where = ["."]
include = ["reddit_scraper*"]
exclude = ["tests*"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]

[tool.pylance]
extraPaths = ["./src/reddit_scraper"]

[tool.pyright]
extraPaths = ["./src/reddit_scraper"]

[tool.ruff]
# Line length configuration
line-length = 160

# Enable flake8-bugbear (`B`) rules.
extend-select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "W",   # pycodestyle warnings
    "N",   # flake8-naming
]

# Never enforce `E203` (whitespace before `:`)
# Never enforce `E266` (too many leading '#' for block comment)
# Never enforce `E501` (line too long)
extend-ignore = ["E203", "E266", "E501"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5
max-returns = 5

[tool.ruff.lint.pycodestyle]
max-doc-length = 160

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Body"]
